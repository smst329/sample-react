{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","src","logo","alt","width","style","animationDuration","Button","text","url","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,gLCS5B,SAASC,IACtB,OACE,yBAAKC,UAAU,kEACb,yBAAKA,UAAU,oDACb,yBAAKA,UAAU,aAAaC,IAAKC,IAAMC,IAAI,aAAaC,MAAM,QAC9D,yBACEJ,UAAU,4CACVK,MAAO,CAAEC,kBAAmB,OAC5BL,IAAKC,IACLC,IAAI,aACJC,MAAM,QAER,yBAAKJ,UAAU,aAAaC,IAAKC,IAAMC,IAAI,aAAaC,MAAM,QAC9D,yBAAKJ,UAAU,aAAaC,IAAKC,IAAMC,IAAI,aAAaC,MAAM,QAC9D,yBAAKJ,UAAU,aAAaC,IAAKC,IAAMC,IAAI,aAAaC,MAAM,SAGhE,wBAAIJ,UAAU,yCAAd,gCACgC,IAC9B,0BAAMA,UAAU,+BAAhB,oBAGF,yBAAKA,UAAU,sCACb,kBAACO,EAAD,CACEC,KAAK,oBACLC,IAAI,mDAEN,kBAACF,EAAD,CACEC,KAAK,yBACLC,IAAI,0CAOd,SAASF,EAAT,GAAiD,IAA/BP,EAA8B,EAA9BA,UAAWQ,EAAmB,EAAnBA,KAAmB,IAAbC,WAAa,MAAP,IAAO,EAC9C,OACE,uBACEC,KAAMD,EACNT,UAAS,UAAKA,EAAL,8MAERQ,GCvCaG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7066402f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\n/**\n * Uses Tailwind CSS for styling\n * Tailwind file is imported in App.css\n */\n\nexport default function App() {\n  return (\n    <div className=\"app min-h-screen text-blue-200 flex items-center flex-col p-20\">\n      <div className=\"mb-10 grid grid-cols-4 grid-rows-2 w-1/2 mx-auto\">\n        <img className=\"opacity-25\" src={logo} alt=\"React Logo\" width=\"300\" />\n        <img\n          className=\"col-span-2 row-span-3 animate-spin m-auto\"\n          style={{ animationDuration: \"30s\" }}\n          src={logo}\n          alt=\"React Logo\"\n          width=\"300\"\n        />\n        <img className=\"opacity-25\" src={logo} alt=\"React Logo\" width=\"300\" />\n        <img className=\"opacity-25\" src={logo} alt=\"React Logo\" width=\"300\" />\n        <img className=\"opacity-25\" src={logo} alt=\"React Logo\" width=\"300\" />\n      </div>\n\n      <h1 className=\"text-2xl lg:text-5xl mb-10 text-right\">\n        Welcome to Your New React App{\" \"}\n        <span className=\"block text-lg text-blue-400\">on DigitalOcean</span>\n      </h1>\n\n      <div className=\"grid grid-cols-2 grid-rows-2 gap-4\">\n        <Button\n          text=\"DigitalOcean Docs\"\n          url=\"https://www.digitalocean.com/docs/app-platform\"\n        />\n        <Button\n          text=\"DigitalOcean Dashboard\"\n          url=\"https://cloud.digitalocean.com/apps\"\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction Button({ className, text, url = \"#\" }) {\n  return (\n    <a\n      href={url}\n      className={`${className} py-3 px-6 bg-purple-400 hover:bg-purple-300 text-purple-800 hover:text-purple-900 block rounded text-center shadow flex items-center justify-center leading-snug text-xs transition ease-in duration-150`}\n    >\n      {text}\n    </a>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}